@page "/login"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject ALGASystem.Services.CustomAuthenticationStateProvider AuthStateProvider
@inject ILogger<Login> Logger

<PageTitle>Iniciar Sesión - ALGA System</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="outlook-card mt-5">
            <div class="outlook-card-header text-center">
                <h3><i class="oi oi-account-login me-2"></i> Iniciar Sesión</h3>
            </div>
            <div class="outlook-card-body">
                <EditForm Model="@_loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @_errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(_successMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            @_successMessage
                        </div>
                    }

                    <div class="mb-3">
                        <label for="username" class="form-label">Usuario</label>
                        <InputText id="username" @bind-Value="_loginModel.UserName" class="form-control" />
                        <ValidationMessage For="@(() => _loginModel.UserName)" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Contraseña</label>
                        <InputText id="password" type="password" @bind-Value="_loginModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => _loginModel.Password)" />
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox id="rememberMe" @bind-Value="_loginModel.RememberMe" class="form-check-input" />
                        <label class="form-check-label" for="rememberMe">Recordarme</label>
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="outlook-btn outlook-btn-primary">
                            <i class="oi oi-account-login me-2"></i> Iniciar Sesión
                        </button>
                    </div>
                </EditForm>

                <div class="mt-3 text-center">
                    <a href="/register" class="outlook-link">¿No tienes una cuenta? Regístrate</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel _loginModel = new LoginModel();
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;

    protected override void OnInitialized()
    {
        // Check for query parameters
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("registered", out var registered))
        {
            _successMessage = "Registration successful! You can now login.";
        }
        
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var returnUrl))
        {
            Logger.LogInformation($"Login page loaded with returnUrl: {returnUrl}");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            Logger.LogInformation($"Attempting login for user: {_loginModel.UserName}");
            
            // Usar el CustomAuthenticationStateProvider para validar el usuario
            var result = await AuthStateProvider.ValidateUserAsync(_loginModel.UserName, _loginModel.Password);
            
            if (result)
            {
                Logger.LogInformation($"Login successful for user: {_loginModel.UserName}");
                
                // Verificar si hay una URL de retorno
                var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
                var returnUrl = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query)
                    .TryGetValue("returnUrl", out var url) ? url.ToString() : "/Dashboard";
                
                Logger.LogInformation($"Redirecting to: {returnUrl}");
                NavigationManager.NavigateTo(returnUrl);
            }
            else
            {
                Logger.LogWarning($"Login failed for user: {_loginModel.UserName}");
                _errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during login");
            _errorMessage = "An error occurred during login. Please try again.";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string UserName { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        public bool RememberMe { get; set; } = false;
    }
}
